* LogMessage:
	- surcharger l'opérateur << pour pouvoir écrire MSG(info, "test i = ") << i

* ShortcutListener:
	- ecouter les événements clavier à plusieurs touches en même temps

* TextListener:
	- voir les événements SDL SDL_TEXTINPUT et SDL_TEXTEDITING
	- créer classe qui "listen" les saisies de texte (conserve tous les 100 derniers caractères tapés)

* faire des tests avec valgrind

* Window:
	- voir la gestion du multi-window dans SDL sinon faire un mutliton
	- si c'est la première fois qu'une Window est instanciée alors seulement on initialise la SDL_InitSubSystem(SDL_INIT_VIDEO)
		- faire pareil pour les autres sous systèmes (Cf. SDL_InitSubSystem).

* EventHandler:
	- supprimer les attributs mouse_x/y, keys ... et remplacer par un SDL_Event avec un getter

* Asset:
	- créer classes Image, Sound, ...
	- créer une Factory par type d'asset
	- créer AssetManager (lazy design pattern)

* Widget:
	- renommé la fonction draw en draw_background et la passer en protected, Widget::draw devient virtuelle pure.
		les sous classes doivent définit draw et peuvent utiliser draw_background

* View:
	- ajouter classe Panel classe fille de Widget: un Panel contiendra des Widget* 
	- système de View en arbre: une View peut contenir des Widget* et des View*. Widget devient une sous class de View cela
		permet de mettre en place le design pattern Composition. Pour la dessiner il faut parcourir toute l'arborescence de View* en appelant la méthode draw.

* Position:
	- surcharger les opératuers +/-/+=/-=/

* init:
	- faire un fichier init.cpp et init_sdl.cpp

* WidgetListener:
	- découper en plusieurs classes: MouseOverWidgetListener, MouseClickListener et WidgetDragAndDropListener
		- faudra faire des listes séparés de chacun des type de WidgetListener dans Widget

* Color:
	- FIX alpha color

* CppUnit:
	- tester tous les sous systèmes

* namespace